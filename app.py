# -----------------------------------------------------------------
# Agente de An√°lise de Dados com Streamlit e LangChain
#
# Autor: [Seu Nome]
# Data: 26 de Setembro de 2025
#
# Descri√ß√£o:
# Esta aplica√ß√£o permite que os usu√°rios fa√ßam o upload de um arquivo CSV,
# visualizem seu conte√∫do e fa√ßam perguntas em linguagem natural sobre os dados.
# Um agente de IA (constru√≠do com LangChain) analisa os dados e fornece
# respostas e conclus√µes.
# -----------------------------------------------------------------

# --- 1. Importa√ß√£o das Bibliotecas Necess√°rias ---
import os
import streamlit as st
import pandas as pd
from dotenv import load_dotenv

# Importa√ß√µes espec√≠ficas do LangChain
from langchain_openai import ChatOpenAI
from langchain.agents import AgentType
from langchain_experimental.agents import create_pandas_dataframe_agent

# --- 2. Configura√ß√£o da P√°gina e Chaves de API ---

# Configura o layout da p√°gina do Streamlit.
# O layout "wide" oferece mais espa√ßo para tabelas e conte√∫do.
st.set_page_config(
    page_title="Agente de An√°lise de Dados",
    page_icon="ü§ñ",
    layout="wide"
)

# Carrega as vari√°veis de ambiente de um arquivo .env (√∫til para desenvolvimento local)
load_dotenv()

# Busca a chave da API. Prioriza os "Secrets" do Streamlit Cloud,
# mas usa as vari√°veis de ambiente como alternativa para rodar localmente.
# NOTA: Substitua 'DEEPSEEK_API_KEY' se estiver usando outra API, como 'GROQ_API_KEY'.
API_KEY = st.secrets.get("DEEPSEEK_API_KEY", os.getenv("DEEPSEEK_API_KEY"))
API_BASE_URL = "https://api.deepseek.com/v1" # Mude se usar outra API
LLM_MODEL = "deepseek-chat" # Mude se usar outra API

# --- 3. Interface do Usu√°rio (UI ) com Streamlit ---

# T√≠tulo e descri√ß√£o da aplica√ß√£o
st.title("ü§ñ Agente de An√°lise de Dados")
st.markdown(
    "Fa√ßa o upload de um arquivo CSV, visualize os dados e fa√ßa perguntas em linguagem natural. "
    "O agente ir√° analisar o arquivo e gerar uma resposta para voc√™."
)

# Widget para o usu√°rio fazer o upload do arquivo CSV
uploaded_file = st.file_uploader(
    "**1. Escolha um arquivo CSV**",
    type=["csv"]
)

# --- 4. Funcionalidade de Pr√©-visualiza√ß√£o dos Dados ---

# Este bloco √© executado assim que um arquivo √© carregado pelo usu√°rio
if uploaded_file is not None:
    try:
        # Carrega o arquivo CSV em um dataframe do Pandas para a pr√©-visualiza√ß√£o
        df_preview = pd.read_csv(uploaded_file)

        st.markdown("---")
        st.subheader("Visualiza√ß√£o do Arquivo Carregado")

        # Exibe o dataframe completo em uma tabela com barra de rolagem
        st.write("**Conte√∫do completo do arquivo CSV:**")
        st.dataframe(df_preview)

        # Exibe informa√ß√µes √∫teis sobre as colunas do dataframe
        st.write("**Informa√ß√µes das Colunas:**")
        info_df = pd.DataFrame({
            "Coluna": df_preview.columns,
            "Tipo de Dado": df_preview.dtypes.astype(str),
            "Valores N√£o Nulos": df_preview.count().values
        })
        st.dataframe(info_df)

    except Exception as e:
        st.error(f"Ocorreu um erro ao tentar ler e pr√©-visualizar o arquivo CSV: {e}")

# --- 5. Se√ß√£o de Intera√ß√£o com o Agente ---

st.markdown("---")
st.subheader("2. Fa√ßa sua Pergunta ao Agente")

# Campo de texto para o usu√°rio digitar a pergunta
question = st.text_input(
    "Digite sua pergunta sobre os dados:",
    placeholder="Ex: Qual a correla√ß√£o entre a coluna 'Time' e 'Amount'?"
)

# Bot√£o para iniciar a an√°lise. A l√≥gica principal √© executada quando este bot√£o √© clicado.
if st.button("Analisar Dados", type="primary"):
    # Verifica se o arquivo foi carregado e se uma pergunta foi feita
    if uploaded_file is not None and question:
        # Verifica se a chave da API foi configurada corretamente
        if not API_KEY:
            st.error("Chave da API n√£o encontrada! Por favor, configure os 'Secrets' no painel da Streamlit Cloud.")
        else:
            # Mostra uma mensagem de "carregando" enquanto o agente trabalha
            with st.spinner("O agente est√° pensando e analisando os dados... Isso pode levar um momento. üß†"):
                try:
                    # Importante: "Rebobina" o arquivo para o in√≠cio antes de l√™-lo novamente.
                    # Necess√°rio porque ele j√° foi lido na etapa de pr√©-visualiza√ß√£o.
                    uploaded_file.seek(0)
                    df_for_agent = pd.read_csv(uploaded_file)

                    # Inicializa o Modelo de Linguagem (LLM) que o agente usar√°
                    llm = ChatOpenAI(
                        model=LLM_MODEL,
                        temperature=0,
                        api_key=API_KEY,
                        base_url=API_BASE_URL
                    )

                    # Cria a inst√¢ncia do Agente Pandas do LangChain
                    agent = create_pandas_dataframe_agent(
                        llm=llm,
                        df=df_for_agent,
                        verbose=True, # Imprime o "racioc√≠nio" do agente nos logs do servidor
                        agent_type=AgentType.OPENAI_FUNCTIONS,
                        handle_parsing_errors=True,
                        allow_dangerous_code=True # Permite que o agente execute c√≥digo Python
                    )

                    # Cria um prompt detalhado para guiar o agente
                    prompt = f"""
                    Sua tarefa √© atuar como um analista de dados s√™nior.
                    Use o dataframe fornecido para responder √† seguinte pergunta: '{question}'.
                    Pense passo a passo. Execute o c√≥digo Python necess√°rio para encontrar a resposta.
                    Forne√ßa uma conclus√£o final clara, concisa e em portugu√™s.
                    """

                    # Executa o agente com o prompt.
                    # agent.invoke() √© usado em vez de ainvoike() para compatibilidade com o Streamlit.
                    response = agent.invoke(prompt)

                    # Exibe a resposta final para o usu√°rio
                    st.success("An√°lise Conclu√≠da!")
                    st.markdown("### Resposta do Agente:")
                    st.write(response["output"])

                except Exception as e:
                    # Captura e exibe qualquer erro que ocorra durante a an√°lise
                    st.error(f"Ocorreu um erro durante a an√°lise: {e}")
    else:
        # Avisa o usu√°rio se o arquivo ou a pergunta estiverem faltando
        st.warning("Por favor, fa√ßa o upload de um arquivo CSV e digite uma pergunta antes de analisar.")
