# -----------------------------------------------------------------
# Agente de An√°lise de Dados com Streamlit e LangChain (usando Google Gemini)
#
# Autor: [Seu Nome]
# Data: 26 de Setembro de 2025
#
# Descri√ß√£o:
# Esta aplica√ß√£o permite que os usu√°rios fa√ßam o upload de um arquivo CSV,
# visualizem seu conte√∫do e fa√ßam perguntas em linguagem natural sobre os dados.
# Um agente de IA (Google Gemini via LangChain) analisa os dados e fornece
# respostas e conclus√µes.
# -----------------------------------------------------------------

# --- 1. Importa√ß√£o das Bibliotecas Necess√°rias ---
import os
import streamlit as st
import pandas as pd
from dotenv import load_dotenv

# Importa√ß√µes espec√≠ficas do LangChain (agora com Google Generative AI)
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.agents.agent_types import AgentType
from langchain_experimental.agents.agent_tools import create_pandas_dataframe_agent

# --- 2. Configura√ß√£o da P√°gina e Chaves de API ---

# Configura o layout da p√°gina do Streamlit.
st.set_page_config(
    page_title="Agente de An√°lise com Gemini",
    page_icon="ü§ñ",
    layout="wide"
)

# Carrega as vari√°veis de ambiente de um arquivo .env (√∫til para desenvolvimento local)
load_dotenv()

# Busca a chave da API do Google. Prioriza os "Secrets" do Streamlit Cloud.
API_KEY = st.secrets.get("GOOGLE_API_KEY", os.getenv("GOOGLE_API_KEY"))

# --- 3. Interface do Usu√°rio (UI) com Streamlit ---

# T√≠tulo e descri√ß√£o da aplica√ß√£o
st.title("ü§ñ Agente de An√°lise de Dados com Google Gemini")
st.markdown(
    "Fa√ßa o upload de um arquivo CSV, visualize os dados e fa√ßa perguntas em linguagem natural. "
    "O agente ir√° analisar o arquivo e gerar uma resposta para voc√™."
)

# Widget para o usu√°rio fazer o upload do arquivo CSV
uploaded_file = st.file_uploader(
    "**1. Escolha um arquivo CSV**",
    type=["csv"]
)

# --- 4. Funcionalidade de Pr√©-visualiza√ß√£o dos Dados ---

if uploaded_file is not None:
    try:
        df_preview = pd.read_csv(uploaded_file)
        st.markdown("---")
        st.subheader("Visualiza√ß√£o do Arquivo Carregado")
        st.write("**Conte√∫do completo do arquivo CSV:**")
        st.dataframe(df_preview)
        st.write("**Informa√ß√µes das Colunas:**")
        info_df = pd.DataFrame({
            "Coluna": df_preview.columns,
            "Tipo de Dado": df_preview.dtypes.astype(str),
            "Valores N√£o Nulos": df_preview.count().values
        })
        st.dataframe(info_df)
    except Exception as e:
        st.error(f"Ocorreu um erro ao tentar ler e pr√©-visualizar o arquivo CSV: {e}")

# --- 5. Se√ß√£o de Intera√ß√£o com o Agente ---

st.markdown("---")
st.subheader("2. Fa√ßa sua Pergunta ao Agente")

question = st.text_input(
    "Digite sua pergunta sobre os dados:",
    placeholder="Ex: Qual a correla√ß√£o entre a coluna 'Time' e 'Amount'?"
)

if st.button("Analisar Dados", type="primary"):
    if uploaded_file is not None and question:
        if not API_KEY:
            st.error("Chave da API do Google n√£o encontrada! Por favor, configure os 'Secrets' no painel da Streamlit Cloud.")
        else:
            with st.spinner("O Gemini est√° pensando e analisando os dados... Isso pode levar um momento. üß†"):
                try:
                    # "Rebobina" o arquivo para o in√≠cio antes de l√™-lo novamente.
                    uploaded_file.seek(0)
                    df_for_agent = pd.read_csv(uploaded_file)

                    # Inicializa o Modelo de Linguagem (LLM) que o agente usar√° - AGORA COM GEMINI
                    llm = ChatGoogleGenerativeAI(
                        model="gemini-pro",
                        temperature=0,
                        google_api_key=API_KEY,
                        convert_system_message_to_human=True # Ajuda na compatibilidade com agentes
                    )

                    # Cria a inst√¢ncia do Agente Pandas do LangChain
                    agent = create_pandas_dataframe_agent(
                        llm=llm,
                        df=df_for_agent,
                        verbose=True,
                        agent_type=AgentType.ZERO_SHOT_REACT_DESCRIPTION, # Este agent_type √© mais compat√≠vel com Gemini
                        handle_parsing_errors=True,
                        allow_dangerous_code=True
                    )

                    # Cria um prompt detalhado para guiar o agente
                    prompt = f"""
                    Sua tarefa √© atuar como um analista de dados s√™nior.
                    Use o dataframe fornecido para responder √† seguinte pergunta: '{question}'.
                    Pense passo a passo. Execute o c√≥digo Python necess√°rio para encontrar a resposta.
                    Forne√ßa uma conclus√£o final clara, concisa e em portugu√™s.
                    """

                    # Executa o agente com o prompt.
                    response = agent.invoke(prompt)

                    # Exibe a resposta final para o usu√°rio
                    st.success("An√°lise Conclu√≠da!")
                    st.markdown("### Resposta do Agente:")
                    st.write(response["output"])

                except Exception as e:
                    # Captura e exibe qualquer erro que ocorra durante a an√°lise
                    st.error(f"Ocorreu um erro durante a an√°lise: {e}")
    else:
        st.warning("Por favor, fa√ßa o upload de um arquivo CSV e digite uma pergunta antes de analisar.")